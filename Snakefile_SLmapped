import sys, re, pysam
from pathlib import Path

## prefix every task command with:
# set -o pipefail  # trace ERR through pipes
# umask 002  # group write permissions
# export TMPDIR={config['tmpdir']}  # configure temp directory
# export SINGULARITY_TMPDIR={config['tmpdir']}  # configure temp directory
shell.prefix(
    f"set -o pipefail; umask 002; export TMPDIR={config['tmpdir']}; export SINGULARITY_TMPDIR={config['tmpdir']}; "
)

batch  = config[ "batch" ]
ref    = config[ "ref" ][ "shortname" ]
reads  = Path( config[ "inputReads" ] )

# function to pull sample name from aligned bam
def getSampleName( bamfile ):
    header = pysam.AlignmentFile( bamfile ).header
    return header.get( 'RG' )[ 0 ][ 'SM' ].strip()

# build "sample2reads" map from input 
if reads.is_dir(): # input is a directory with bam files in it
    bamGen = map( str, reads.glob( '*.bam' ) )
elif reads.is_file(): # assume this is a file of filenames, one per line
    bamGen = open( reads,  'r' ).read().split()
else:
    print( f'ERROR: {reads} is not a directory or a fofn?' )
    sys.exit( 1 )   

sample2reads = { 
                getSampleName( bamfile ) : bamfile
                for bamfile in bamGen 
               }
# point the sample2barcode variable at the map
sample2barcode = sample2reads
# function to get expected samples
def _get_demuxed_samples( wildcards ):
    return sample2reads.keys()


print(f"Processing batch {batch} with reference {ref}.")

targets = []

include: "rules/slinputs.smk"
include: "rules/common.smk"
include: "rules/deepvariant.smk"
include: "rules/whatshap.smk"
include: "rules/pbsv.smk"
include: "rules/sniffles2.smk"
if config["run_cohort"]:
    include: "rules/glnexus.smk"
if config[ "probes" ] != "None":
    include: "rules/hsmetrics.smk"
if config[ "pharmcat" ][ "run_analysis" ]:
    include: "rules/pharmcat.smk"
    include: "rules/pangu_cyp2d6.smk"
if config[ "annotate" ][ "gVCF" ]:
    include: "rules/annotate.smk"
if config[ "assembly" ]:
    include: "rules/hifiasm.smk"
    include: "rules/combine_vcf.smk"

# DV
targets.extend(
    [
        f"batches/{batch}/{sample}/deepvariant/{sample}.{ref}.deepvariant.{suffix}"
        for suffix in [
            "vcf.gz",
            "vcf.gz.tbi",
            "g.vcf.gz",
            "g.vcf.gz.tbi",
            "visual_report.html",
            "vcf.stats.txt",
        ]
        for sample in sample2reads.keys()
    ]
)
# WH
targets.extend(
    [
        f"batches/{batch}/{sample}/whatshap/{sample}.{ref}.deepvariant.{suffix}"
        for suffix in [
            "phased.vcf.gz",
            "phased.vcf.gz.tbi",
            "phased.gtf",
            "phased.tsv",
            "phased.blocklist",
            "haplotagged.bam",
            "haplotagged.bam.bai",
        ]
        for sample in sample2reads.keys()
    ]
)

# pbsv
targets.extend(
    [
        f"batches/{batch}/{sample}/pbsv/{sample}.{ref}.pbsv.vcf"
        for sample in sample2barcode.keys()
    ]
)

# QC extras
if config['QC']['runQC']:
    include: "rules/qc_cov.smk"

ruleorder: deepvariant_postprocess_variants > tabix_vcf

rule all:
    input:
        targets,
